{"version":3,"sources":["logo.svg","components/Alert.js","components/ConnectionsForm.js","components/Profile.js","components/ConnectionsList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Alert","type","text","className","ConnectionsForm","PersonName","CompanyName","handlePersonName","handleCompanyName","handleOnSubmit","handleExperience","handleURL","url","experience","edit","onSubmit","htmlFor","id","name","placeholder","value","onChange","Profile","connection","handleEditProfile","handleDeleteProfile","handleClickURL","Name","Company","aria-label","onClick","ConnectionsList","Connections","handleClearList","map","key","length","initialConnections","uuid","App","useState","setConnections","setPersonName","setCompanyName","show","alert","setAlert","setEdit","setId","setUrl","setExperience","useEffect","localStorage","setItem","JSON","stringify","handleAlert","setTimeout","style","background","e","target","preventDefault","finalConnections","profile","newConnection","filter","item","profileId","find","window","open","focus","reduce","acc","curr","parseInt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.154e9834.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nexport default function Alert({type,text}) {\r\n    return (\r\n        <div className={`alert alert-${type}`}>\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { MdSend } from \"react-icons/md\";\r\nexport default function ConnectionsForm({\r\n  PersonName,\r\n  CompanyName,\r\n  handlePersonName,\r\n  handleCompanyName,\r\n  handleOnSubmit,\r\n  handleExperience,\r\n  handleURL,\r\n  url,\r\n  experience,\r\n  edit,\r\n}) {\r\n  return (\r\n    <form onSubmit={handleOnSubmit}>\r\n      <div className=\"form-center\">\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"PersonName\">Person Name</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"PersonName\"\r\n            name=\"PersonName\"\r\n            placeholder=\"e.g. Utkarsh\"\r\n            value={PersonName}\r\n            onChange={handlePersonName}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"CompanyName\">Company</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"CompanyName\"\r\n            name=\"CompanyName\"\r\n            placeholder=\"e.g. Amazon\"\r\n            value={CompanyName}\r\n            onChange={handleCompanyName}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"form-center\">\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"LinkedInURL\">LinkedIn Profile</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"LinkedInURL\"\r\n            name=\"LinkedInURL\"\r\n            placeholder=\"profile url\"\r\n            value={url}\r\n            onChange={handleURL}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"Experience\">Experience(Years)</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"Experience\"\r\n            name=\"Experience\"\r\n            placeholder=\"e.g. 2\"\r\n            value={experience}\r\n            onChange={handleExperience}\r\n          />\r\n        </div>\r\n      </div>\r\n      <button type=\"submit\" className=\"btn\">\r\n        {edit ? \"edit\" : \"submit\"}\r\n        <MdSend className=\"btn-icon\" />\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { MdEdit, MdDelete } from \"react-icons/md\";\r\nimport { AiFillLinkedin } from \"react-icons/ai\";\r\nexport default function Profile({\r\n  connection,\r\n  handleEditProfile,\r\n  handleDeleteProfile,\r\n  handleClickURL,\r\n}) {\r\n  const { id, Name, Company, experience, url } = connection;\r\n  return (\r\n    <li className=\"item\">\r\n      <div className=\"info\">\r\n        <span className=\"expense\">\r\n          {Name}\r\n          <button\r\n            className=\"linkedIn-btn\"\r\n            aria-label=\"Edit Button\"\r\n            onClick={() => handleClickURL(url)}\r\n          >\r\n            <AiFillLinkedin />\r\n          </button>\r\n        </span>\r\n        <span className=\"amount\">{Company}</span>\r\n      </div>\r\n      <div>\r\n        <button\r\n          className=\"edit-btn\"\r\n          aria-label=\"Edit Button\"\r\n          onClick={() => handleEditProfile(id)}\r\n        >\r\n          <MdEdit />\r\n        </button>\r\n        <button\r\n          className=\"clear-btn\"\r\n          aria-label=\"Clear Button\"\r\n          onClick={() => handleDeleteProfile(id)}\r\n        >\r\n          <MdDelete />\r\n        </button>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { MdDelete } from \"react-icons/md\";\r\nexport default function ConnectionsList({\r\n  Connections,\r\n  handleClearList,\r\n  handleEditProfile,\r\n  handleDeleteProfile,\r\n  handleClickURL,\r\n}) {\r\n  return (\r\n    <div>\r\n      <ul className=\"list\">\r\n        {Connections.map((connection) => {\r\n          return (\r\n            <Profile\r\n              key={connection.id}\r\n              connection={connection}\r\n              handleDeleteProfile={handleDeleteProfile}\r\n              handleEditProfile={handleEditProfile}\r\n              handleClickURL = {handleClickURL}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n      {Connections.length > 0 && (\r\n        <button className=\"btn\" onClick={() => handleClearList()}>\r\n          Clear List\r\n          <MdDelete className=\"btn-icons\" />\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Alert from \"./components/Alert\";\nimport ConnectionsForm from \"./components/ConnectionsForm\";\nimport ConnectionsList from \"./components/ConnectionsList\";\nimport uuid from \"uuid/v4\";\nconst initalConnections = [\n  {\n    id: uuid(),\n    Name: \"Ram\",\n    Company: \"Tower\",\n    experience: 1,\n    url: \"https://www.linkedin.com/in/utkarshsinha97/\",\n  },\n  {\n    id: uuid(),\n    Name: \"jam\",\n    Company: \"Estee\",\n    experience: 5,\n    url: \"https://www.linkedin.com/in/utkarshsinha97/\",\n  },\n  {\n    id: uuid(),\n    Name: \"sam\",\n    Company: \"De Shaw\",\n    experience: 3,\n    url: \"https://www.linkedin.com/in/utkarshsinha97/\",\n  },\n];\nlet initialConnections = initalConnections;\n// let initialConnections = localStorage.getItem(\"MyConnections\") ? JSON.parse(localStorage.getItem(\"MyConnections\")) : initalConnections;\n\n//console.log(initalConnections);\nfunction App() {\n  const [Connections, setConnections] = useState(initialConnections);\n  const [PersonName, setPersonName] = useState(\"\");\n  const [CompanyName, setCompanyName] = useState(\"\");\n  const [alert, setAlert] = useState({ show: false });\n  const [edit, setEdit] = useState(false);\n  const [id, setId] = useState(0);\n  const [url, setUrl] = useState(\"\");\n  const [experience, setExperience] = useState(\"\");\n\n  useEffect(() => {\n    localStorage.setItem(\"MyConnections\", JSON.stringify(Connections));\n  }, [Connections]);\n  const handlePersonName = (e) => {\n    setPersonName(e.target.value);\n  };\n\n  const handleCompanyName = (e) => {\n    setCompanyName(e.target.value);\n  };\n\n  const handleAlert = ({ type, text }) => {\n    setAlert({ show: true, type: type, text: text });\n    setTimeout(() => {\n      setAlert({ show: false });\n    }, 7000);\n  };\n\n  const handleExperience = (e) => {\n    setExperience(e.target.value);\n  };\n  const handleURL = (e) => {\n    setUrl(e.target.value);\n  };\n\n  const handleClickURL = (url) => {\n    const win = window.open(url, '_blank');\n    win.focus();\n  };\n\n  const handleOnSubmit = (e) => {\n    e.preventDefault();\n    if (PersonName === \"\" || CompanyName === \"\" || url === \"\") {\n      handleAlert({ type: \"danger\", text: \"Item Can't be added!\" });\n      return;\n    }\n    if (edit) {\n      let finalConnections = Connections.map((profile) => {\n        return profile.id === id\n          ? {\n              ...profile,\n              Name: PersonName,\n              Company: CompanyName,\n              url: url,\n              experience: experience,\n            }\n          : profile;\n      });\n      setConnections(finalConnections);\n    } else {\n      const newConnection = {\n        id: uuid(),\n        Name: PersonName,\n        Company: CompanyName,\n        experience: experience,\n        url: url,\n      };\n      setConnections([...Connections, newConnection]);\n    }\n    setCompanyName(\"\");\n    setPersonName(\"\");\n    setUrl(\"\");\n    setExperience(\"\");\n    if (edit) handleAlert({ type: \"success\", text: \"Item Edited!\" });\n    else handleAlert({ type: \"success\", text: \"Item added!\" });\n  };\n\n  const handleClearList = () => {\n    setConnections([]);\n    handleAlert({ type: \"success\", text: \"All Connections Deleted!\" });\n  };\n  const handleEditProfile = (profileId) => {\n    setEdit(true);\n    setId(profileId);\n    let connection = Connections.find((profile) => profile.id === profileId);\n    setPersonName(connection.Name);\n    setCompanyName(connection.Company);\n    setUrl(connection.url);\n    setExperience(connection.experience);\n  };\n\n  const handleDeleteProfile = (id) => {\n    let finalConnections = Connections.filter((item) => item.id !== id);\n    setConnections(finalConnections);\n    handleAlert({ type: \"success\", text: \"Item Deleted!\" });\n  };\n\n  return (\n    <>\n      {alert.show && <Alert type={alert.type} text={alert.text} />}\n      <Alert />\n      <h1>\n        Linked\n        <span\n          style={{\n            background: \"#0e76a8\",\n          }}\n        >\n          In\n        </span>{\" \"}\n        Connections\n      </h1>\n      <main className=\"App\">\n        <ConnectionsForm\n          PersonName={PersonName}\n          CompanyName={CompanyName}\n          url={url}\n          experience={experience}\n          handleCompanyName={handleCompanyName}\n          handlePersonName={handlePersonName}\n          handleURL={handleURL}\n          handleOnSubmit={handleOnSubmit}\n          handleExperience={handleExperience}\n          edit={edit}\n        />\n        <ConnectionsList\n          Connections={Connections}\n          handleClearList={handleClearList}\n          handleDeleteProfile={handleDeleteProfile}\n          handleEditProfile={handleEditProfile}\n          handleClickURL={handleClickURL}\n        />\n      </main>\n      <h1>\n        Total Experience:{\" \"}\n        <span className=\"total\">\n          {Connections.reduce((acc, curr) => {\n            return (acc += curr.experience ? parseInt(curr.experience) : 0);\n          }, 0)}\n        </span>\n      </h1>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}